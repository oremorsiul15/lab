[
    {
        "question": "____ is a thread library for Solaris that maps many user-level threads to one kernel thread.\nA) Pthreads B) Green threads C) Sthreads D) Java threads",
        "ans": "B"
    },
    {
        "question": "Pthreads refers to ____.\nA) the POSTFIX standard.\nB) an implementation for thread behavior.\nC) a specification for thread behavior.\nD) an API for process creation and synchronization.",
        "ans": "C"
    },
    {
        "question": "The ____ multithreading model multiplexes many user-level threads to a smaller or equal\nnumber of kernel threads.\nA) many-to-one model C) many-to-many model\nB) one-to-one model D) many-to-some model",
        "ans": "C"
    },
    {
        "question": "Cancellation points are associated with ____ cancellation.\nA) asynchronous B) deferred C) synchronous D) non-deferred",
        "ans": "B"
    },
    {
        "question": "Which of the following would be an acceptable signal handling scheme for a\nmultithreaded program?\nA) Deliver the signal to the thread to which the signal applies.\nB) Deliver the signal to every thread in the process.\nC) Deliver the signal to only certain threads in the process.\nD) All of the above",
        "ans": "D"
    },
    {
        "question": "6. Signals can be emulated in windows through ____. A) asynchronous procedure calls B) local procedure calls C) remote procedure calls D) none of the above",
        "ans": "A"
    },
    {
        "question": "Thread-local storage is data that ____. A) is not associated with any process B) has been modified by the thread, but not yet updated to the parent process C) is generated by the thread independent of the thread's process D) is unique to each thread",
        "ans": "D"
    },
    {
        "question": "LWP is ____. A) short for lightweight processor B) placed between system and kernel threads C) placed between user and kernel threads D) common in systems implementing one-to-one multithreading models",
        "ans": "C"
    },
    {
        "question": "Windows uses the ____. A) one-to-one model B) many-to-one model C) one-to many-model D) many-to-many model",
        "ans": "A"
    },
    {
        "question": "n multithreaded programs, the kernel informs an application about certain events using a procedure known as a(n) ____. A) signal B) upcall C) event handler D) pool",
        "ans": "B"
    },
    {
        "question": "11. _____ is not considered a challenge when designing applications for multicore systems. A) Deciding which activities can be run in parallel\nB) Ensuring there is a sufficient number of cores C) Determining if data can be separated so that it is accessed on separate cores D) Identifying data dependencies between tasks.",
        "ans": "B"
    },
    {
        "question": "A ____ provides an API for creating and managing threads. A) set of system calls B) multicore system C) thread library D) multithreading model",
        "ans": "C"
    },
    {
        "question": "The _____ model multiplexes many user-level threads to a smaller or equal number of kernel threads. A) many-to-many B) two-level C) one-to-one D) many-to-one",
        "ans": "A"
    },
    {
        "question": "The _____ model maps many user-level threads to one kernel thread. A) many-to-many B) two-level C) one-to-one D) many-to-one",
        "ans": "D"
    },
    {
        "question": "The _____ model maps each user-level thread to one kernel thread. A) many-to-many B) two-level C) one-to-one D) many-to-one",
        "ans": "C"
    },
    {
        "question": "The _____ model allows a user-level thread to be bound to one kernel thread. A) many-to-many B) two-level C) one-to-one D) many-to-one",
        "ans": "B"
    },
    {
        "question": "The most common technique for writing multithreaded Java programs is _____. A) extending the Thread class and overriding the run() method B) implementing the Runnable interface and defining its run() method C) designing your own Thread class D) using the CreateThread() function",
        "ans": "B"
    },
    {
        "question": "In Pthreads, a parent uses the pthread_join() function to wait for its child thread to complete. What is the equivalent function in Win32? A) win32_join() B) wait() C) WaitForSingleObject() D) join()",
        "ans": "C"
    },
    {
        "question": "19. Which of the following statements regarding threads is false? A) Sharing is automatically provided in Java threads. B) Both Pthreads and Win32 threads share global data. C) The start() method actually creates a thread in the Java virtual machine. D) The Java method join() provides similar functionality as the WaitForSingleObject in Win32.",
        "ans": "A"
    },
    {
        "question": "A _____ uses an existing thread — rather than creating a new one — to complete a task. A) lightweight process B) thread pool C) scheduler activation D) asynchronous procedure cal",
        "ans": "B"
    },
    {
        "question": "According to Amdahl's Law, what is the speedup gain for an application that is 60% parallel and we run it on a machine with 4 processing cores? A) 1.82 B) .7 C) .55 D) 1.43",
        "ans": "D"
    },
    {
        "question": "_________ involves distributing tasks across multiple computing cores. A) Concurrency B) Task parallelism C) Data parallelism D) Parallelism",
        "ans": "B"
    },
    {
        "question": "___________ is a formula that identifies potential performance gains from adding additional computing cores to an application that has a parallel and serial component. A) Task parallelism B) Data parallelism C) Data splitting D) Amdahl's Law",
        "ans": "D"
    },
    {
        "question": "When OpenMP encounters the #pragma omp parallel directive, it A) constructs a parallel region B) creates a new thread C) creates as many threads as there are processing cores D) parallelizes for loops",
        "ans": "C"
    },
    {
        "question": "Grand Central Dispatch handles blocks by A) placing them on a dispatch queue B) creating a new thread C) placing them on a dispatch stack D) constructing a parallel region",
        "ans": "A"
    },
    {
        "question": "A traditional (or heavyweight) process has a single thread of control",
        "ans": "True"
    },
    {
        "question": "A thread is composed of a thread ID, program counter, register set, and heap",
        "ans": "False"
    },
    {
        "question": "Virtually all contemporary operating systems support kernel threads",
        "ans": "True"
    },
    {
        "question": "Linux distinguishes between processes and threads.",
        "ans": "False"
    },
    {
        "question": "In Java, data shared between threads is simply declared globally.",
        "ans": "False"
    },
    {
        "question": "Each thread has its own register set and stack",
        "ans": "True"
    },
    {
        "question": "Deferred cancellation is preferred over asynchronous cancellation",
        "ans": "True"
    },
    {
        "question": "The single benefit of a thread pool is to control the number of threads",
        "ans": "False"
    },
    {
        "question": "It is possible to create a thread library without any kernel-level support",
        "ans": "True"
    },
    {
        "question": "It is possible to have concurrency without parallelism.",
        "ans": "True"
    },
    {
        "question": "Amdahl's Law describes performance gains for applications with both a serial and parallel component.",
        "ans": "True"
    },
    {
        "question": "OpenMP only works for C, C++, and Fortran programs",
        "ans": "True"
    },
    {
        "question": "Grand Central Dispatch requires multiple threads",
        "ans": "False"
    },
    {
        "question": "The trend in developing parallel applications is to use implicit threading",
        "ans": "True"
    },
    {
        "question": "Task parallelism distributes threads and data across multiple computing cores.",
        "ans": "False"
    }
]